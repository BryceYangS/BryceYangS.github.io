---
layout: post
title:  "[Node]Node.js와 비동기 프로그래밍 "
subtitle:   "Node.js와 비동기 프로그래밍"
categories: programming
tags: programming node javascript
---

Node js와 비동기 프로그래밍에 대해 적어보려한다. 이건 예전에 어떤 기업에서 면접볼 때 물어봤던 건데, 또렷이 대답하지 못했던 기억이 나서 정리해보고자 한다.

## 서버

---

대부분의 어플리케이션은 서버를 기반으로 동작한다. 서버 한대에 수많은 클라이언트가 요청을 보내기때문에 병목현상이 발생한다. 그래서 서버는 처리 성능에 신경써야 한다.

병목구간은 대부분 I/O에서 발생한다. 즉 Disk에 접근하거나 Network Access로 데이터를 주고 받는 때가 병목현상의 주범이다. 캐시나 램에 비해 수만배에서 수천만배정도의 성능 차이가 난다고 한다.

이처럼 I/O를 처리하는 데에 오랜 시간이 걸리기 때문에, 다른 요청이 대기되는 상황이 벌어진다. 이런 문제를 해결하기 위해 사람들은 클라이언트의 요청을 쓰레드로 처리하는 방법을 고안해 내었다.

## 쓰레드 

---

쓰레드는 어떤 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 말한다. 이 흐름을 여러개 만드는 것이 멀티쓰레드가 되는 것이다.

### 멀티쓰레드

멀티쓰레드 방식은 서버의 요청 처리를 여러개의 쓰레드가 처리하여 병렬적인 작업이 가능하도록 하는 방식이다. 쓰레드는 각각 독립적으로 실행되어 다른 요청을 각가의 쓰레드가 받아서 처리할 수 있다.

멀티쓰레드는 병목헌상제거에 이상적인 방식이라고 볼 수 있지만 몇가지 문제가 존재한다.

접속자의 수만큼 쓰레드를 생성하기때문에 동접자가 많아지면 쓰레드가 많이생기게 된다. 쓰레드는 메모리를 할당받기 때문에 서버의 메모리 소모가 극심해지게 되는 것이다.

결국 서버의 자원은 제한되어 있기 때문에 일정 수 이상의 쓰레드는 생성할 수 없고, 프로그래머는 다시 고민에 빠지게 된다.

멀티쓰레드의 이런 한계때문에 실무에서는 서버에 많은 돈을 써서 업그레이드하거나 로드밸런싱등으로 분산처리를 하게 된다.

### 비동기 처리

쓰레드에 단일쓰레드방식과 멀티쓰레드방식이 있다면, 쓰레드의 처리 방식에는 동기방식과 비동기방식이 있다.

동기방식은 하나의 요청이 처리되는 동안 다른 요청이 펜딩되어 처리가 미루어지는 방식을 이야기한다. 동기방식은 병목현상의 주범으로 지금까지는 멀티쓰레드를 사용하여 하나의 쓰레드가 맡아 처리하도록 하였다.

이제 비동기처리 방식이 등장한다. 비동기 방식은 하나의 요청 처리가 끝나기 전에 제어권을 다음 요청에게 넘긴다. I/O 논블로킹 방식이라고 할 수 있다.

## Node.js의 비동기처리

---

Node.js가 바로 이 비동기처리 방식을 사용한다. Node.js는 싱글쓰레드 비동기 방식이기때문에 요청을 처리하면서 다음 요청을 받을 수 있다.

Node.js의 비동기 처리는 이벤트를 기반으로 이루어진다. 클라이언트의 요청을 비동기로 처리하기 위해 이벤트가 발생하며 서버 내부에 메세지 형태로 전달된다.

서버 내부에서는 이 메세지가 이벤트 루프로 처리된다. 이벤트루프가 요청을 처리하는동안 제어권이 다음요청으로 넘어가고 처리가 끝나면 callback으로 호출한 요청에 알려준다.

Node.js는 싱글쓰레드이기 때문에 하나의 처리가 늦어지면 전체 처리에 영향을 미치곤한다.

즉, 대용량 처리나 CPU를 많이 사용하는 처리가 연속된다면, Node.js는 좋지 않은 선택일 수 있다.

또한 Node.js를 사용하면서 동기방식의 코딩을 한다면, 제성능을 발휘할 수 없으므로 좋지 않다.

적당한 수준의 처리의 연속일 때 Node.js는 최고의 성능을 발휘 할 것이다.


## 마치며

---

Node.js의 비동기처리 방식은 코드 패러다임에 많은 변화를 주었다.

코드를 비동기적으로 프로그래밍하다보니 콜백지옥(뎁스가 너무깊어지는 현상)에 빠지게 된 프로그래머들은 async와 같은 방법을 고안하게 된다.

또한 너무 큰 처리의 경우를 아주 잘게 나누어서 처리하는 방법도 고안하게 된다.

문제 해결에 있어서 개발자를 따라올 수 있는 직종이 드믈지 않을까. 덕분에 공부할게 좀 많지만. 우리는 거인의 어깨위로 올라가는 과정을 밟고있다.


