---
layout: post
title: "[Git] Git 시작하기"
subtitle: "Git 시작하기"
categories: study
tags: Git
---

![git-logo.png](/assets/img/git-logo.png)

**Git 세가지 상태**
1.Committed
	- 데이터가 로컬 데이터베이스에 안전하게 저장됨.
2.Modified
	- 수정한 파일을 아직 로컬 데이터 베이스에 커밋하지 않은 것.
3.Staged
	- 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태 의미.

![areas.png](/assets/img/areas.png)

- Git Directory : Git이 프로젝트의 메타 데이터 및 객체 데이터베이스 저장하는 곳.
	- git clone 명령어 사용 시 Git directory 생성됨
- Working Directory : 프로젝트의 특정 버전을 Checkout한 것.
	- git directory는 작업하는 공간에 있으며, 그 directory 내 압축된 데이터베이스에서 파일을 가져와 working tree 생성
- Staging Area : git directory에 존재. 단순한 파일이고 곧 커밋할 파일에 대한 정보 저장. Staging Area에 저장할 때 "index" 라고 함(add index).

**Git 기본 작동**
1. Working Tree에서 파일 수정
2. Staging Area에 파일을 Stage해서 커밋할 스냅샷 생성. 모든 혹은 일부 파일 선택하여 추가 가능.
3. Staging Area에 있는 파일들을 Commit해서 Git Directory에 영구 스냅샷으로 저장.


**Git 설치**
---
 window 설치 방법
  - http://git-scm.com 에서 다운로드
  - 유닉스, 리눅스 명령어를 window에서 사용해서 제어할 수 있도록 해줌

**저장소 만들기**
---
1. 기존 폴더, 디렉토리를 Git repository로 만들기
  - 설치된 git bash를 실행 후 local repository 생성
  	- mkdir 명령어 통해 repository 만들기
  - git init 명령어  : Git repository 초기화
   ==> 명령어 입력 時 
	- Initialized empty Git repository in D:/gitfth/.git/
	- .git 파일이 생성 됨
2. 기존 저장소 Clone 하기
  - 다른 Git repository로부터 복사할 때 **git clone** 명령어 사용
  - git의 clone과 svc의 checkout과 다른점 : git은 서버의 거의 모든 데이터를 복사. git clone은 프로젝트 히스토리 전부 다운로드.
  ``git clone https://github.com/libgit2/libgit2``

**Git이 관리할 대상으로 파일 등록**
---
 - git은 기본적으로 새로운 파일을 관리하지 X.
 - 파일을 관리하기 위해서는 관리 대상으로 등록을 해야 함.
 - git status  : 해당 respository 내 파일들의 상태 알 수 있음
 - git add : 이 명령어를 통해 파일을 추적

**git remote**
로컬저장소와 원격저장소를 연결한다.

**Git 원격저장소와 연결한다.**
git remote add origin [자신의 Github 또는 Bitbucket등의 원격저장소 주소]
 
**연결된 원격저장소 확인한다.**
remote -v




[Reference]
 - 생활코딩(지옥에서 온 Git) : https://opentutorials.org/course/2708
 - Git-scm : http://bitly.kr/UsHxMK5z