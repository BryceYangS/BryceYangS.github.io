---
layout: post
title: "[Book] 읽기 좋은 코드가 좋은 코드다"
subtitle: "읽기 좋은 코드가 좋은 코드다 정리"
categories: various
tags: techBook
---

> <읽기 좋은 코드가 좋은 코드다> 정리

## Part 1. 표면적 수준에서의 개선
### 2. 이름에 정보 담기
- 특정한 단어를 사용하라 : get 대신 fetch나 download를 사용하는 것이 나을 수 있다
- 보편적인 이름의 사용을 피하라 : tmp, rtnVal 같은 것은 지양
- 구체적인 이름을 이용 
- 변수명에 중요한 세부 정보를 덧붙여라 : 단위와 같은 것들
- 사용 범위가 넓으면 긴 이름을 사용

### 3. 오해할 수 없는 이름들
1. 경계에 대한 변수 사용
	- 경계를 포함하는 한계값을 다룰 때는 `min` / `max`를 사용
	- 경계를 포함하는 범위에는 `first` / `last`를 사용
	- 경계를 포함하고/배제하는 범위에는 `begin` / `end`를 사용
2. boolean
	- is 또는 has와 같은 단어를 사용
	- 의미를 부정하는 단어는 피하는게 좋음

### 4. 미학
> 미학적으로 보기 좋은 코드가 사용하기 더 편리하다
- 여러 블록에 담긴 코드가 모두 비슷한 일을 수행하면 ,실루엣이 동일해 보이게 만들어라
- 코드 곳곳을 '열'로 만들어서 줄을 맞추면 코드를 한 눈에 훑어보기 편하다 : Yang's comment 최근에는 일관된 코드 스타일을 위해 코드 컨벤션을 정의하고 IDE에 적용하고 있음. 이에 따라 최근에는 줄을 맞추는 것이 어렵다.
- 빈 줄을 이용하여 커다란 블록을 논리적인 '문단'으로 나누어라

### 5. 주석에 담아야 하는 대상
> 주석의 목적은 코드를 읽는 사람이 코드를 작성한 사람만큼 코드를 잘 이해하게 돕는 데 있다
1. 설명하지 말아야 할 것
	- 코드 자체에서 재빨리 도출될 수 있는 사실
	- 나쁜 함수명과 같이 나쁘게 작성된 코드를 보정하려고 애쓰는 주석. → 코드를 수정하라
2. 기록해야 하는 생각
	- 코드가 특정한 방식으로 작성된 이유
	- 코드에 담긴 결함. TODO: 혹은 XXX:와 같은 표시를 사용하라
	- 어떤 상수가 특정한 값을 갖게 된 사연
3. 제 3자 입장에서 필요한 경우
	- 코드를 읽는 사람이 자기가 작성한 코드의 어느 부분을 보고 '뭐라고?'라는 생각을 할지 예측해보고, 그 부분에 주석을 추가
	- 평범한 사람이 예상하지 못할 특이한 동작을 기록
	- 파일이나 클래스 수준 주석에서 '큰 그림'을 설명하고 각 조각이 어떻게 맞춰지는지 설명
	- 코드에 블록별로 주석을 달아 세부 코드를 읽다가 나무만 보고 숲은 못 보는 실수를 저지르지 마라

### 6. 명확하고 간결한 주석 달기
- 'it'이나 'this'같은 대명사가 여러 가지를 가리킬 수 있다면 사용하지 않는 것이 좋다
- 함수의 동작을 실제로 할 수 있는 한도 내에서 최대한 명확하게 설명하라
- 신중하게 선택된 입/출력 예로 주석을 서술
- 코드가 가진 의도를 너무 자세한 내용이 아니라 *높은 수준*에서 개괄적으로 설명
- 많은 의미를 함축하는 단어로 주석을 간단하게 만들어라

## Part 2. 루프와 논리를 단순화하기
### 7. 읽기 쉽게 흐름제어 만들기