---
layout: post
title: "[Book] 객체지향의 사실과 오해"
subtitle: "객체지향의 사실과 오해"
categories: various
tags: techBook
---

> 조영호님의 `객체지향의 사실과 오해` 정리글

# 1. 협력하는 객체들의 공동체
### 객체의 자율성
- 객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것으로부터 나옴
- 다른 객체가 `무엇`을 수행하는지는 알지만 `어떻게` 수행하는지는 관심사가 아님
- 객체의 관점에서 자율성이란 자신의 상태를 직접 관리하고 상태를 기반으로 스스로 판단하고 행동할 수 있음을 의미

> 객체는 상태와 행위를 하나의 단위로 묶는 자율적인 존재

### 협력과 메시지
🏀 메시지  
- 객체지향의 세계에서는 오직 한 가지 의사소통 수단만이 존재. 이를 메시지라고 함.
- 객체는 협력을 위해 다른 객체에게 메시지를 전송하고 다른 객체는 메시지를 수신.
- 송신자(Sender) - 수신자(Receiver)

### 메서드와 자율성
🏄🏻 메서드  
- 객체가 수신된 메시지를 처리하는 방법
- 메시지와 메서드의 분리는 객체의 협력에 참여하는 객체들 간의 자율성을 증진시킴


## 객체지향의 본질
⚽️ 객체지향이란 시스템을 상호작용하는 **자율적인 객체들의 공동체**로 바라보고 객체를 이용해 시스템을 분할하는 방법  
🏀 자율적인 객체란 `상태`와 `행위`를 함께 지니며, 스스로 자기 자신을 책임지는 객체를 의미  
🏈 객체는 시스템의 행위를 구현하기 위해 다른 객체와 `협력`한다. 각 객체는 협력 내에서 정해진 `역할`을 수행하며 역할은 `책임`의 집합  
⚾️ 객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 `메서드`를 자율적으로 선택  

#### 객체를 지향하라
- 클래스가 객체지향 프로그래밍 언어의 관점에서 매우 중요한 구성요소인 것은 분명하지만 객체지향의 핵심을 이루는 중심 개념이라고 말하기에는 무리가 있음
- 코드를 담는 클래스의 관점이 아닌 메시지를 주고받는 객체의 관점으로 사고의 전환 필요
> 객체지향의 핵심은 적절한 책임을 수행하는 역할 간의 유연하고 견고한 협력 관계를 구축하는 것


<br/>

# 2. 이상한 나라의 객체
```
객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다  
	- 레베카 워프스브록 -
```

### 객체지향과 인지능력
- 객체란 인간이 분명하게 인지하고 구별할 수 있는 물리적인 또는 개념적인 경계를 지닌 어떤 것
- 객체지향 패러다임의 목적은 현실 세계 모방이 아닌 현실 세계를 기반으로 새로운 세계를 창조하는 것


<br/>
### 객체, 그리고 소프트웨어 나라
- 객체의 다양한 특성을 효과적으로 설명하기 위해서는 객체를 `상태`, `행위`, `식별자`를 지닌 실체로 보는 것이 가장 효과적

> `객체`  
> 객체란 식별 가능한 개체 또는 사물.  
> 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가짐

### 상태
🏀 왜 상태가 필요한가?  
- 상태를 이용하면 과거의 모든 행동 이력을 설명하지 않고도 행동의 결과를 쉽게 예측하고 설명할 수 있다.
- 상태는 근본적으로 세상의 복잡성을 완화하고 인지 과부하를 줄일 수 있는 중요한 개념

⚽ 상태와 프로퍼티  
- 프로퍼티
	+ 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 프로퍼티라고 한다.
- 객체를 구성하는 단순한 값은 속성(attribute)

> `상태`  
> 특정시점에 객체가 가지고 있는 정보의 집합  
> 객체의 상태는 객체젱 존재하는 `정직인 프로퍼티`와 `동적인 프로퍼티 값`으로 구성된다.
> 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분

- 객체는 다른 객체의 상태에 직접적으로 접근할 수도 상태를 변경할 수도 없다
- 객체는 스스로의 행동에 의해서만 상태가 변경되는 것을 보장함으로써 객체의 자율성을 유지

### 행동
#### 상태와 행동
- 상태와 행동 사이의 관계
	+ 객체의 행동은 상태에 영향을 받는다
	+ 객체의 행동은 상태를 변경시킨다

#### 협력과 행동
- 객체는 다른 객체와 적극적으로 상호작용하며 '협력하는 객체들의 공동체'에 참여하기 위해 노력한다.
- 객체의 행동은 객체가 협력에 참여할 수 있는 유일한 방법
- 객체는 협력에 참여하는 과정에서 자기 자신의 상태뿐만 아니라 다른 객체의 상태 변경을 유발할 수도 있다
- 객체의 행동으로 인해 발생하는 결과 두 가지 관점 설명
	1. 객체 자신의 상태변경
	2. 행동 내에서 협력하는 다른 객체에 대한 메시지 전송

> `행동`  
> 행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동  
> 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다  
> 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동의 외부에 가시적이어야 한다

#### 상태 캡슐화
- 객체지향에서의 모든 객체는 자신의 상태를 스스로 관리하는 **자율적인 존재**
- 객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다
- 객체가 외부에 노출하는 것은 행동뿐이며, 외부에서 객체에 접근할 수 있는 유일한 방법 역시 행동뿐
- 상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화
	+ 객체의 자율성을 높임
	+ 자율적인 객체는 스스로 판단하고 스스로 결정하기 때문에 객체의 자율성이 높아질수록 객체의 지능도 높아짐 --> 협력은 유연하고 간결해짐

결론 : 상태를 잘 정의된 행동 집합 뒤로 캡슐화하는 것은 객체의 자율성을 높이고 협력을 단순하고 유연하게 만든다. 캡슐화를 해야 하는 이유.

#### 식별자
- 식별자 : 객체를 서로 구별할 수 있는 특정한 프로퍼티
- 모든 객체가 식별자를 가짐
	+ 객체가 아닌 단순한 값은 식별자를 가지지 않음
- Value(값) : 숫자, 문자열, 날짜, 시간, 금액 등과 같이 변하지 않는 양을 모델링
	+ 불변 상태를 가짐
	+ 값의 상태가 같은지를 통해 `동등성`(equality)을 판단
	+ 값 객체(value object)
- 객체 : 변경되는 상태를 포함. 행동을 통해 상태 변경. `가변 상태`를 가짐
	+ `동일성`(identical) : 식별자를 기반으로 객체가 같은지를 판단할 수 있는 성질
	+ 참조 객체(reference object), 엔티티(entity)

> `식별자`  
> 식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티  
> 값은 식별자를 가지지 않기 때문에 상태를 이용한 `동등성` 검사를 통해 두 인스턴스 비교  
> 객체는 식별자를 이용한 `동일성` 검사를 통해 두 인스턴스 비교  


## 행동이 상태를 결정한다
> 객체지향에 갓 입문한 사람들이 가장 쉽게 빠지는 함정은 상태를 중심으로 객체를 바라보는 것  

1. 상태를 먼저 결정할 경우 캡슐화가 저해
2. 객체를 협력자가 아닌 고립된 섬으로 만든다.
3. 객체의 재사용성이 저하

- 객체지향 설계는 애플리케이션에 필요한 협력을 생각하고 협력에 참여하는 데 필요한 행동을 생각한 후 행동을 수행할 객체를 선택하는 방식으로 수행됨
- 행동을 결정한 후에야 필요한 정보가 무엇인지를 고려하게 되며 이 과정에서 필요한 상태가 결정됨

어떤 책임이 필요한가를 결정하는 과정이 전체 설계를 주도  
 - 책임-주도 설계(Responsibility-Driven Design)

***상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일뿐***

<br/>

# 3. 타입과 추상화
> `추상화`  
> 어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법(**단순화**)  

추상화 방법  
1. 구체적인 사물들 간의 공통점은 취하고, 차이점은 버리는 일반화를 통해 단순화
2. 중요한 부분을 강조하기 위해 불필요한 세부 사항 제거 통한 단순화


공통점을 기반으로 객체들을 묶기 위해 `개념(=타입)`을 사용.  
개념을 이용하면 객체를 여러 그룹으로 `분류`할 수 있음  

개념의 3가지 관점  
1. 심볼(symbol) : 개념을 가리키는 간략한 이름/명칭
2. 내연(intension) : 개념의 완전한 정의. 객체가 개념에 속하는지 여부 확인 기준
3. 외연(extension) : 개념에 속하는 모든 객체 집합


객체의 타입  
1. 어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 객체가 수행하는 행동
	- 어떤 행동을 하느냐에 따라 **객체의 타입이 결정됨**
2. 객체의 내부적인 표현은 외부로부터 철저하게 감춰진다
	- 내부 표현 방식이 다르더라도 어떤 객체들이 동일하게 행동한다면 그 객체들은 동일한 타입

타입은 추상화. 타입을 이용하면 객체의 동적인 특성을 추상화할 수 있음

*결론적으로 객체의 타입을 결정하는 것은 객체의 `행동`*  

처리방식은 다를 수 있는데 여기서 다형성이 나오는 것
<br/>

#### 일반화/특수화
객체지향에서 일반화/특수화 관계를 결정하는 것은 객체의 상태를 표현하는 데이터가 아니라 `행동`하는 것  
일반적인 타입은 특수한 타입에 비해 더 적은 수의 행동을 가지며 특수한 타입은 일반적인 타입에 비해 더 많은 행동을 가짐  
단, 특수한 타입은 일반적인 타입이 할 수 있는 모든 행동을 동일하게 수행할 수 있어야 함

<br/>
캡슐화는 내부의 데이터는 감추고 행위를 외부에 노출을 함으로써 객체의 응집도를 높이고 결합도를 낮추는 것. 객체 혼자서 작동하는 것이 아닌 협력, 위임을 통해 객체지향 세계가 작동하고 있음. 따라서 외부에 노출하는 행위가 객체지향 세계에서는 중요한 것이며, 상태를 표현하는 속성보다 행위가 더 강조되는 이유이다.
<br/>
<br/>

# 4. 역할, 책임, 협력
협력은 요청과 함께 발생함.  

어떤 객체가 어떤 요청에 대해 대답해 줄 수 있거나, 적절한 행동을 할 의무가 있는 경우 해당 객체가 `책임`을 가진다고 말한다.  

객체지향 설계는 협력에 참여하기 위해 어떤 객체가 어떤 책임을 수행해야 하고 어떤 객체로부터 메시지를 수신할 것인지를 결정하는 것으로부터 시작된다.  

역할은 책임의 집합.  
역할은 협력 안에서 구체적인 객체로 대체될 수 있는 추상적인 협력자. 즉, 다른 객체에 의해 대체 가능함.
