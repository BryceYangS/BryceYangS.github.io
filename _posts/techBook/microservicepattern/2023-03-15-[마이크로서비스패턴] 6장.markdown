---
layout: post
title: "[마이크로서비스패턴] 6장 비즈니스 로직 개발:이벤트 소싱"
subtitle: "마이크로서비스패턴, 이벤트 소싱"
categories: various
tags: techBook
---
> 6장. 비즈니스 로직 개발: 이벤트 소싱

6장 핵심내용  
- 이벤트 소싱 패턴 응용 비즈니스 로직 개발
- 이벤트 저장소 구현
- 사가와 이벤트 소싱 기반의 비즈니스 로직 연계
- 이벤트 소싱을 응용한 사가 오케스트레이터 구현

## 1.이벤트 소싱 응용 비즈니스 로직 개발
> 이벤트 소싱 : 상태 변화를 나타내는 일련의 도메인 이벤트로 애그리거트를 저장

장점 : 이력 보존 -> 감사/통제 용도, 도메인 이벤트 확실하게 발행  
단점 : 학습 곡선, 이벤트 저장소 쿼리 어려움(CQRS 패턴 적용 필요)  

### 기존 영속화 문제점
#### 1) 객체 관계 임피던스 부정합
테이블 형태의 관계형 스키마와 리치 도메인 모델 간의 간극.

#### 2) 애그리거트 이력 없음
현재 애그리거트의 상태만 저장. 애그리거트 이력을 남기는 것은 개발자가 직접 구현해야 함.

#### 3) 감사 로깅 구현하기 어려움. 오류 자주 발생.
어느 사용자가 애그리거트를 변경했는지 감사 로그를 남겨 추적.  
감사는 보안/통제 + 사용자 액션 이력 자체가 중요한 경우도 있음.  
감사 로깅 코드, 비즈니스 로직의 계속된 분화로 버그 가능성 높아짐.

#### 4) 이벤트 발행 로직이 비즈니스 로직에 추가됨
도메인 이벤트 발행을 지원하지 않는 기존 영속화 한계점.  
개발자가 직접 이벤트 생성 로직 추가 필요. -> 비즈니스 로직 동기화 되지 않는 위험성 존재 

### 이벤트 소싱
이벤트 위주 비즈니스 로직 구현, 애그리거트를 DB에 일련의 이벤트로 저장하는 방식.  
애그리거트를 DB에 있는 이벤트 저장소에 일련의 이벤트로 저장  
- eg) Order 애그리거트를 EVENTS 테이블의 여러 로우로 저장 => 각 로우가 주문 생성됨, 주문 승인됨, 주문 배달됨 등의 도메인 이벤트

![event-sourcing](/assets/img/techbook/microservicepattern/event-sourcing-bounded-context.png)
- 출처 : https://learn.microsoft.com/ko-kr/azure/architecture/patterns/event-sourcing

#### 순서
- 애그리거트 생성/수정 시 애플리케이션은 애그리거트가 발생시킨 이벤트를 EVENTS 테이블에 삽입
- 애그리거트 로드 시 이벤트 저장소에서 이벤트 가져와 재연
  1. 애그리거트의 이벤트를 로드
  2. 기본 생성자를 호출하여 애그리거트 인스턴스 생성
  3. 이벤트를 하나씩 순회하며 apply() 호출

Eventuate 클라이언트 프레임워크 사례  

```java
Class aggregateClass = ...;
Aggregate aggregate = aggregateClass.newInstance();
for (Event event : events) {
  aggregate = aggregate.applyEvent(event);
}
// 애그리거트 사용
```

이벤트 소싱에서의 이벤트는 곧 `상태 변화`를 의미한다. 이벤트는 필수 데이터 또는 여러 데이터를 포함시켜 강화할 수 있음.  
이벤트 소싱에서 이벤트에 포함되는 내용은 주로 애그리거트에 의해 결정됨. 애그리거트 상태가 변경될 때 마다 **반드시 이벤트 발생**시켜야 함.  
\+ 상태 전이를 위해 **필요한 데이터**를 이벤트가 갖고 있어야함.(단순 상태 값 변경 ~ 객체 추가/삭제 등)  


비즈니스 로직 : `process(<T extends Command> command)` & `apply(<T extends Event> event)`로 변경


이벤트 저장소 : 낙관적 잠금 기법 통해 동시 업데이트 처리.  
- 이벤트에 딸려온 버전 정보를 각 애그리거트 인스턴스마다 두고, 애플리케이션이 이벤트 삽입할 때 이벤트 저장소가 버전 변경 여부 체크
- 이벤트 번호를 버전 번호로 사용 가능. 또는, 이벤트 저장소에서 명시적으로 버전 번호 관리.


이벤트를 OUTBOX 테이블에 저장 후 꺼내어 사용한 후 삭제하는 이벤트 발행 방식과 달리, 이벤트 소싱은 EVENTS 테이블에 **영구 저장**  

#### 이벤트 발행의 두 가지 방식
- [3장 내용 중 메시지 확실하게 발행하는 방법](/various/2023/03/03/마이크로서비스패턴-3장/#메시지-확실하게-발행하는-방법)
1. 폴링
  - 영구적으로 이벤트가 저장되기 때문에 어느 이벤트가 새 이벤트인지 분간이 필요
  - 트랜잭션이 이벤트를 발생시키는 순서와 다르게 커밋할 수 있는 문제 존재 => EVENT 테이블에 `이벤트 발행 여부` 추적 컬럼 추가
1. 트랜잭션 로그 테일링
  - 트랜잭션 로그 통해 EVENTS 테이블에 삽입된 이벤트를 읽어 메시지 브로커에 발행

#### 성능 개선 : 스냅샷 활용
T.B.D

## 2.이벤트 저장소 구현

## 3.사가 & 이벤트 소싱 접목