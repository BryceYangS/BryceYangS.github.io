---
layout: post
title: "[마이크로서비스패턴] 4장 트랜잭션 관리: 사가"
subtitle: "마이크로서비스패턴, 트랜잭션 관리, 사가 패턴"
categories: various
tags: techBook
---
> 4장. 트랜잭션 관리 : 사가 패턴

4장 핵심내용  
- 분산 트랜잭션이 적잘하지 않은 이유
- 사가 패턴 통한 데이터 일관성 유지
- 사가 : 코레오그래피/오케스트레이션 방식
- 비격리 문제 조치 대첵

# 마이크로서비스 아키텍처에서의 트랜잭션 관리
서비스마다 DB가 따로 있기 때문에 여러 DB에 걸쳐 데이터 일관성 유지위한 수단 필요.  

## 분산 트랜잭션
과거 분산 트랜잭션 활용해 데이터 일관성 유지([X/Open XA](https://ko.wikipedia.org/wiki/X/Open_XA): 분산 트랜잭션의 사실상 표준)  

### 단점
- NoSQL DB, 현대 메시지 브로커(RabbitMQ, 아파치 카프카) 등 미지원
- 동기 IPC : 가용성 떨어짐
- 요즘 애플리케이션에 부적합 : 일관성보다 가용성이 중시.

### 장점
- 로컬 트랜잭션과 프로그래밍 모델과 동일

## 사가
> 사가는 비동기 메시징을 이용해 편성한 일련의 로컬 트랜잭션. 서비스 간 데이터 일관성은 사가로 유지  

1. ACID 트랜잭션에서 *I(격리성)이 사가에는 없음*.
2. 로컬 트랜잭션마다 변경분을 커밋하므로 `보상 트랜잭션`을 걸어 롤백  


로컬 트랜잭션이 완료되면 **메시지**를 발행 -> 다음 사가 단계 트리거

### 보상 트랜잭션
사가는 트랜잭션이 진행하는 반대 방향으로 보상 트랜잭션을 실행

# 사가 편성

# 비격리 문제 처리

# 주문 서비스 및 주문 생성 사가 설계